//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Permaculture_Animal.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;

    public partial class AnimalDBEntities : DbContext
    {
        public AnimalDBEntities()
            : base("name=AnimalDBEntities")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tblAnimal> tblAnimals { get; set; }
        public virtual DbSet<tblBreed> tblBreeds { get; set; }
        public virtual DbSet<tblDisease> tblDiseases { get; set; }
        public virtual DbSet<tblSpecy> tblSpecies { get; set; }
        public virtual DbSet<vAnimal> vAnimals { get; set; }
        public virtual DbSet<vBreed> vBreeds { get; set; }

        public virtual int DELETETHEANIMAL(string aNIMALID)
        {
            var aNIMALIDParameter = aNIMALID != null ?
                new ObjectParameter("ANIMALID", aNIMALID) :
                new ObjectParameter("ANIMALID", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETETHEANIMAL", aNIMALIDParameter);
        }

        public virtual int DELETETHEBREED(string bREEDNAME)
        {
            var bREEDNAMEParameter = bREEDNAME != null ?
                new ObjectParameter("BREEDNAME", bREEDNAME) :
                new ObjectParameter("BREEDNAME", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETETHEBREED", bREEDNAMEParameter);
        }

        public virtual int DELETETHEDISEASE(Nullable<int> dISEASENAME)
        {
            var dISEASENAMEParameter = dISEASENAME.HasValue ?
                new ObjectParameter("DISEASENAME", dISEASENAME) :
                new ObjectParameter("DISEASENAME", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETETHEDISEASE", dISEASENAMEParameter);
        }

        public virtual int DELETETHESPECIES(string sPECIESNAME)
        {
            var sPECIESNAMEParameter = sPECIESNAME != null ?
                new ObjectParameter("SPECIESNAME", sPECIESNAME) :
                new ObjectParameter("SPECIESNAME", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETETHESPECIES", sPECIESNAMEParameter);
        }

        public virtual int INSERTINTOANIMAL(string aNIMALNAME, string aNIMALSEX, Nullable<System.DateTime> bIRTHDATE, Nullable<System.DateTime> dEATHDATE, string bIRTHPLACE, string fATHERNAME, string mOTHERNAME, Nullable<int> sPECIESID, Nullable<int> dISEASEID)
        {
            var aNIMALNAMEParameter = aNIMALNAME != null ?
                new ObjectParameter("ANIMALNAME", aNIMALNAME) :
                new ObjectParameter("ANIMALNAME", typeof(string));

            var aNIMALSEXParameter = aNIMALSEX != null ?
                new ObjectParameter("ANIMALSEX", aNIMALSEX) :
                new ObjectParameter("ANIMALSEX", typeof(string));

            var bIRTHDATEParameter = bIRTHDATE.HasValue ?
                new ObjectParameter("BIRTHDATE", bIRTHDATE) :
                new ObjectParameter("BIRTHDATE", typeof(System.DateTime));

            var dEATHDATEParameter = dEATHDATE.HasValue ?
                new ObjectParameter("DEATHDATE", dEATHDATE) :
                new ObjectParameter("DEATHDATE", typeof(System.DateTime));

            var bIRTHPLACEParameter = bIRTHPLACE != null ?
                new ObjectParameter("BIRTHPLACE", bIRTHPLACE) :
                new ObjectParameter("BIRTHPLACE", typeof(string));

            var fATHERNAMEParameter = fATHERNAME != null ?
                new ObjectParameter("FATHERNAME", fATHERNAME) :
                new ObjectParameter("FATHERNAME", typeof(string));

            var mOTHERNAMEParameter = mOTHERNAME != null ?
                new ObjectParameter("MOTHERNAME", mOTHERNAME) :
                new ObjectParameter("MOTHERNAME", typeof(string));

            var sPECIESIDParameter = sPECIESID.HasValue ?
                new ObjectParameter("SPECIESID", sPECIESID) :
                new ObjectParameter("SPECIESID", typeof(int));

            var dISEASEIDParameter = dISEASEID.HasValue ?
                new ObjectParameter("DISEASEID", dISEASEID) :
                new ObjectParameter("DISEASEID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTINTOANIMAL", aNIMALNAMEParameter, aNIMALSEXParameter, bIRTHDATEParameter, dEATHDATEParameter, bIRTHPLACEParameter, fATHERNAMEParameter, mOTHERNAMEParameter, sPECIESIDParameter, dISEASEIDParameter);
        }

        public virtual int INSERTINTOBREED(string bREEDNAME, Nullable<int> sPECIESID)
        {
            var bREEDNAMEParameter = bREEDNAME != null ?
                new ObjectParameter("BREEDNAME", bREEDNAME) :
                new ObjectParameter("BREEDNAME", typeof(string));

            var sPECIESIDParameter = sPECIESID.HasValue ?
                new ObjectParameter("SPECIESID", sPECIESID) :
                new ObjectParameter("SPECIESID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTINTOBREED", bREEDNAMEParameter, sPECIESIDParameter);
        }

        public virtual int INSERTINTODISEASE(string dISEASENAME)
        {
            var dISEASENAMEParameter = dISEASENAME != null ?
                new ObjectParameter("DISEASENAME", dISEASENAME) :
                new ObjectParameter("DISEASENAME", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTINTODISEASE", dISEASENAMEParameter);
        }

        public virtual int INSERTINTOSPECIES(string sPECIESNAME)
        {
            var sPECIESNAMEParameter = sPECIESNAME != null ?
                new ObjectParameter("SPECIESNAME", sPECIESNAME) :
                new ObjectParameter("SPECIESNAME", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTINTOSPECIES", sPECIESNAMEParameter);
        }

        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));

            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }

        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));

            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }

        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }

        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }

        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }

        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }

        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }

        public virtual int UPDATETHEANIMAL(string aNIMALNAME, string aNIMALSEX, Nullable<System.DateTime> bIRTHDATE, Nullable<System.DateTime> dEATHDATE, string bIRTHPLACE, string fATHERNAME, string mOTHERNAME, Nullable<int> sPECIESID, Nullable<int> dISEASEID, Nullable<int> aNIMALID)
        {
            var aNIMALNAMEParameter = aNIMALNAME != null ?
                new ObjectParameter("ANIMALNAME", aNIMALNAME) :
                new ObjectParameter("ANIMALNAME", typeof(string));

            var aNIMALSEXParameter = aNIMALSEX != null ?
                new ObjectParameter("ANIMALSEX", aNIMALSEX) :
                new ObjectParameter("ANIMALSEX", typeof(string));

            var bIRTHDATEParameter = bIRTHDATE.HasValue ?
                new ObjectParameter("BIRTHDATE", bIRTHDATE) :
                new ObjectParameter("BIRTHDATE", typeof(System.DateTime));

            var dEATHDATEParameter = dEATHDATE.HasValue ?
                new ObjectParameter("DEATHDATE", dEATHDATE) :
                new ObjectParameter("DEATHDATE", typeof(System.DateTime));

            var bIRTHPLACEParameter = bIRTHPLACE != null ?
                new ObjectParameter("BIRTHPLACE", bIRTHPLACE) :
                new ObjectParameter("BIRTHPLACE", typeof(string));

            var fATHERNAMEParameter = fATHERNAME != null ?
                new ObjectParameter("FATHERNAME", fATHERNAME) :
                new ObjectParameter("FATHERNAME", typeof(string));

            var mOTHERNAMEParameter = mOTHERNAME != null ?
                new ObjectParameter("MOTHERNAME", mOTHERNAME) :
                new ObjectParameter("MOTHERNAME", typeof(string));

            var sPECIESIDParameter = sPECIESID.HasValue ?
                new ObjectParameter("SPECIESID", sPECIESID) :
                new ObjectParameter("SPECIESID", typeof(int));

            var dISEASEIDParameter = dISEASEID.HasValue ?
                new ObjectParameter("DISEASEID", dISEASEID) :
                new ObjectParameter("DISEASEID", typeof(int));

            var aNIMALIDParameter = aNIMALID.HasValue ?
                new ObjectParameter("ANIMALID", aNIMALID) :
                new ObjectParameter("ANIMALID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATETHEANIMAL", aNIMALNAMEParameter, aNIMALSEXParameter, bIRTHDATEParameter, dEATHDATEParameter, bIRTHPLACEParameter, fATHERNAMEParameter, mOTHERNAMEParameter, sPECIESIDParameter, dISEASEIDParameter, aNIMALIDParameter);
        }

        public virtual int UPDATETHEBREED(string bREEDNAME, Nullable<int> sPECIESID, Nullable<int> bREEDID)
        {
            var bREEDNAMEParameter = bREEDNAME != null ?
                new ObjectParameter("BREEDNAME", bREEDNAME) :
                new ObjectParameter("BREEDNAME", typeof(string));

            var sPECIESIDParameter = sPECIESID.HasValue ?
                new ObjectParameter("SPECIESID", sPECIESID) :
                new ObjectParameter("SPECIESID", typeof(int));

            var bREEDIDParameter = bREEDID.HasValue ?
                new ObjectParameter("BREEDID", bREEDID) :
                new ObjectParameter("BREEDID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATETHEBREED", bREEDNAMEParameter, sPECIESIDParameter, bREEDIDParameter);
        }

        public virtual int UPDATETHEDISEASE(string dISEASENAME, Nullable<int> dISEASEID)
        {
            var dISEASENAMEParameter = dISEASENAME != null ?
                new ObjectParameter("DISEASENAME", dISEASENAME) :
                new ObjectParameter("DISEASENAME", typeof(string));

            var dISEASEIDParameter = dISEASEID.HasValue ?
                new ObjectParameter("DISEASEID", dISEASEID) :
                new ObjectParameter("DISEASEID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATETHEDISEASE", dISEASENAMEParameter, dISEASEIDParameter);
        }

        public virtual int UPDATETHESPECIES(string sPECIESNAME, Nullable<int> sPECIESID)
        {
            var sPECIESNAMEParameter = sPECIESNAME != null ?
                new ObjectParameter("SPECIESNAME", sPECIESNAME) :
                new ObjectParameter("SPECIESNAME", typeof(string));

            var sPECIESIDParameter = sPECIESID.HasValue ?
                new ObjectParameter("SPECIESID", sPECIESID) :
                new ObjectParameter("SPECIESID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATETHESPECIES", sPECIESNAMEParameter, sPECIESIDParameter);
        }
    }
}
